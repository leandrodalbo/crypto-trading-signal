name: Publish
on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: leandrodalbo/tradingsignalsapi
  VERSION: ${GITHUB_SHA}

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Vulnerabilities Scan
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload Vulnerabilities report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Build + UnitTests
        run: |
          chmod +x gradlew 
          ./gradlew build
  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ build ]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  terraform:
    name: "Deploy Fargate Tasks"
    runs-on: ubuntu-latest
    needs: [ build, package]
    defaults:
      run:
        working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}
      TF_VAR_aws_access_key: ${{ secrets.AWS_KEY }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET }}
      STATE_BUCKET_KEY: ${{ secrets.STATE_KEY }}
      STATE_BUCKET: ${{ secrets.STATE }}
      TF_VAR_resources_bucket: ${{ secrets.STATE }}
      TF_VAR_resources_bucket_key: ${{ secrets.RESOURCES_BUCKET_KEY }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}
      TF_VAR_dbname: ${{ secrets.DBNAME }}
      TF_VAR_dbuser: ${{ secrets.DBUSER }}
      TF_VAR_port: ${{ secrets.APP_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="key=$STATE_BUCKET_KEY" -backend-config="bucket=$STATE_BUCKET" -backend-config="region=$TF_VAR_region"

      - name: code format
        id: fmt
        run: terraform fmt -check

      - name: Recreate Plan
        id: plan
        run: terraform plan -no-color -var-file=prod.tfvars
        continue-on-error: true

      - name: Exit on Plan Failure
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Recreate
        run: terraform apply -auto-approve -var-file=prod.tfvars








